{
  "data": [
    {
      "type": "AffiliatePartner",
      "link": "https://embeddedexpert.io/affiliate#form",
      "reasons": [
        {
          "id": 1,
          "title": "We Pay The Highest Commissions",
          "reason": "Our commission structure is straightforward, offering 30%-40% commissions on all courses. You earn on every sale made through your referral link without worrying about creating products or handling customer service.",
          "tags": ["reason", "partner", "affiliate"]
        },
        {
          "id": 2,
          "title": "We Offer a Wide Range of Products",
          "reason": "Our affiliate program includes a variety of embedded systems courses, enabling affiliates to target diverse audiences effectively.",
          "tags": ["reason", "partner", "affiliate"]
        },
        {
          "id": 3,
          "title": "Dedicated Support Team",
          "reason": "Our affiliate team provides marketing materials, training, and support to ensure your success as an affiliate.",
          "tags": ["reason", "partner", "affiliate"]
        }
      ]
    },
    {
      "type": "CompanyInfo",
      "name": "EmbeddedExpert.io",
      "about": "EmbeddedExpertIO represents a vibrant collective dedicated to the mastery of sophisticated embedded systems software development for professionals. EmbeddedExpertIO stands as a premier source of tailored embedded systems development courses, catering to individuals and enterprises seeking to hone or acquire embedded firmware programming expertise. Our extensive course selections encompass beginner to advanced levels, addressing diverse facets of embedded systems development, such as WiFi, STM32, IoT systems design, memory safeguarding, and beyond. Our core objective is to equip individuals and organizations with the indispensable skills to thrive in the swiftly evolving embedded systems sector. We achieve this by providing immersive, hands-on education under the guidance of seasoned industry specialists. Our ambition is to emerge as the favored learning platform for embedded systems development professionals across the globe.",
      "services": [
        "Embedded Systems Development",
        "Training Programs",
        "Embedded Programming Courses"
      ],
      "tags": ["company", "about", "services", "Embedded Systems"]
    },
    {
      "type": "FAQ",
      "questions": [
        {
          "question": "What is EmbeddedExpert.io?",
          "answer": "EmbeddedExpertIO represents a vibrant collective dedicated to the mastery of sophisticated embedded systems software development for professionals. EmbeddedExpertIO stands as a premier source of tailored embedded systems development courses, catering to individuals and enterprises seeking to hone or acquire embedded firmware programming expertise. Our extensive course selections encompass beginner to advanced levels, addressing diverse facets of embedded systems development, such as WiFi, STM32, IoT systems design, memory safeguarding, and beyond. Our core objective is to equip individuals and organizations with the indispensable skills to thrive in the swiftly evolving embedded systems sector. We achieve this by providing immersive, hands-on education under the guidance of seasoned industry specialists. Our ambition is to emerge as the favored learning platform for embedded systems development professionals across the globe",
          "tags": ["about", "platform"]
        },
        {
          "question": "How can I enroll in a course?",
          "answer": "You can enroll in a course by visiting our website, selecting the course you are interested in, and following the enrollment instructions provided.",
          "tags": ["enrollment", "courses", "how to"]
        },
        {
          "question": "Do you offer certificates for course completion?",
          "answer": "Yes, we offer certificates upon successful completion of our courses.",
          "tags": ["certificates", "course completion", "credentials"]
        },
        {
          "question": "What payment methods are accepted?",
          "answer": "We accept various payment methods including credit/debit cards, PayPal, and other online payment options.",
          "tags": ["payment", "methods", "options"]
        },
        {
          "question": "Is there a refund policy?",
          "answer": "Yes, we offer a 30-day refund policy if you are not satisfied with the course.",
          "tags": ["refund", "policy", "satisfaction", "course policy"]
        }
      ]
    },

    {
      "type": "Resource",
      "id": 1,
      "title": "Realtime Operating Systems Proficiency Test",
      "description": "Prepare comprehensively for Embedded Software Engineer roles with our RTOS proficiency test.",
      "previewLink": "https://embeddedexpert.io/front/images/assets/images/resources/RTOS-ProficiencyTest.pdf",
      "tag": [
        "RTOS",
        "proficiency test",
        "embedded software engineer",
        "resources"
      ]
    },

    {
      "type": "Review",
      "reviews": [
        {
          "id": 1,
          "review": "Israel is a great instructor. Every step is explained not only what to do but why. I would recommend this course over any other.",
          "course": "Embedded Systems Bare-Metal Programming Ground Up™ (STM32)",
          "reviewer": "Jeff R.",
          "tags": ["Embedded Systems review", "review", "course review"]
        },
        {
          "id": 2,
          "review": "I thought this was going to be a course that followed another book, but when he directed us to the user/dev documentation to find answers, I saw this was something special. Problem-solving should always be at the focus of any programming course, even above syntaxt and technology. Very good start to this course.",
          "course_name": "Embedded Systems Bare-Metal Programming Ground Up™ (STM32)",
          "course_link": "https://study.embeddedexpert.io/p/modern-bare-metal-embedded-c-programming-from-ground-up111",
          "name": "Abigail J.",
          "tags": ["Embedded Systems review", "review", "course review"]
        },
        {
          "id": 3,
          "review": "Explanation is really good but could go deeper into some stuff. Especially for beginners like me it is hard to understand some topics which I never heard before. But like many courses they don´t share their slides which is really a shame since udemy also blocked the screenshot function it is really hard and unnecessary complex to take notes.",
          "course_name": "ARM Assembly Language From Ground Up™ 1",
          "course_link": "https://study.embeddedexpert.io/p/arm-assem-1",
          "name": "Pascal W.",
          "tags": ["Embedded Systems review", "review", "course review"]
        },
        {
          "id": 4,
          "review": "This course is amazing. It takes you from absolute beginner to expert in programming STM32 MCU. It taught you all the basic especially reading the reference manual. I highly recommend the instructor if you would like to learn about embedded systems.",
          "course_name": "Embedded Systems Bare-Metal Programming Ground Up™ (STM32)",
          "course_link": "https://study.embeddedexpert.io/p/modern-bare-metal-embedded-c-programming-from-ground-up111",
          "name": "Aisha A.",
          "tags": ["Embedded Systems review", "review", "course review"]
        },
        {
          "id": 5,
          "review": "Very enlightening and eye opening .I always wondered about how different logic gates come together to create a microarchitecture and then and instruction set and then and then a full fledged architecture like ARM . This course has been able to explain all of that. Looking forward to the rest of the course.",
          "course_name": "ARM Assembly Language From Ground Up™ 1",
          "course_link": "https://study.embeddedexpert.io/p/arm-assem-1",
          "name": "Marvin",
          "tags": ["Embedded Systems review", "review", "course review"]
        },
        {
          "id": 6,
          "review": "The course is well structured and detailed. It's good for beginners and advanced students as the examples are all in assembly language which is not offered by other instructors. I am waiting for more examples to be added and i really enjoyed this course.",
          "course_name": "ARM Assembly Language From Ground Up™ 1",
          "course_link": "https://study.embeddedexpert.io/p/arm-assem-1",
          "name": "Nishad P.",
          "tags": ["Embedded Systems review", "review", "course review"]
        },
        {
          "id": 7,
          "review": "The course is explained in a friendly manner, the instructor tells what each line of code does and demonstrates the result code which is really satisfying, it would be also great if he could had shown the use of usefull API's like CMSIS-RTOS.",
          "course_name": "Build Your Own RealTime OS (RTOS) From Ground Up™ on ARM 1",
          "course_link": "https://study.embeddedexpert.io/p/rtos1",
          "name": "Abraham R.",
          "tags": ["Embedded Systems review", "review", "course review"]
        },
        {
          "id": 8,
          "review": "Excellent course. I am an embedded systems lecturer at local college and I must say, I found the content very useful and well presented. I recommend this to any embedded systems student.",
          "course_name": "Build Your Own RealTime OS (RTOS) From Ground Up™ on ARM 1",
          "course_link": "https://study.embeddedexpert.io/p/rtos1",
          "name": "James K.",
          "tags": ["Embedded Systems review", "review", "course review"]
        },
        {
          "id": 9,
          "review": "Well taught. The course goes deep into key areas like the design of scheduling algorithms and even explaining the algorithms using animations, this makes the learning process very easy.",
          "course_name": "Build Your Own RealTime OS (RTOS) From Ground Up™ on ARM 1",
          "course_link": "https://study.embeddedexpert.io/p/rtos1",
          "name": "Limd",
          "tags": ["Embedded Systems review", "review", "course review"]
        }
      ]
    },

    {
      "type": "Technology",
      "technologies": [
        "TensorFlow Lite",
        "STM-32 IDE",
        "STM-32",
        "TouchGFX",
        "MQTT",
        "IBM Watson IoT",
        "Google Cloud",
        "Microsoft Azure IoT",
        "AWS IoT",
        "Amazon RTOS",
        "GNU",
        "Bluetooth",
        "ARM KEIL",
        "CMSIS",
        "LoRa",
        "USB",
        "4G/LTE",
        "NFC"
      ],
      "tags": ["Technology used", "Technology we use"]
    },

    {
      "type": "Testimonial",
      "testimonials": [
        {
          "id": 1,
          "testimonial": "The courses are excellent and have helped me gain valuable skills and secure a freelancing business.",
          "name": "Simon Morrison",
          "designation": "Freelance Firmware Developer & Consultant",
          "country": "Canada",
          "tags": ["testimonial", "course testimonial", "course review"]
        },
        {
          "id": 2,
          "testimonial": "All the course I took are great! In all of them I learned new and useful things that I use in my personal projects, and also they helped me to achieve a job as a software embedded engineer. Also, I'm still taking them to learn new things and improve my skills in embedded systems. I totally recommend these courses! And thank you to the Israel to share his knowledge to everyone!",
          "name": "Ricardo Escarcega",
          "designation": "Embedded SoftwareEngineer",
          "country": "Mexico",
          "tags": ["testimonial", "course testimonial", "course review"]
        },
        {
          "id": 3,
          "testimonial": "The material offered by your courses is one of the most systematic and easily understandable for beginners.I would also like to note that only your courses cover a large range of topics from Embedded Software Development and Embedded Systems itself. Not so long ago, I switched to using your courses through your platform and I hope it will develop. About me , my name is Ivan and I am a Design and Application Engineer from the Mechanical and Electrical field of Marine HVAC system, I am from Russia, I am 37 years old. I have a higher education in the field of Operation and Maintenance of Motor transport (Automotive). After many years of experience as an engineer in my specialty, I came across the fact that it became necessary to study Embedded systems and their programming, and so I found the content I needed in your courses.I hope you will develop and graduate new courses. Personally, I would really like to see topics dedicated to communication buses - CAN, CAN FD, LIN, RS-485, FlexRay and so on.",
          "name": "Ivan",
          "designation": "Design and Application Engineer",
          "country": "Russia",
          "tags": ["testimonial", "course testimonial", "course review"]
        },
        {
          "id": 4,
          "testimonial": "I have done several of the EmbeddedExpertIO courses. I have enjoyed all of them and gained valuable additional knowledge and skills. Has helped me to obtain more work in my freelancing business.",
          "name": "Simon Morrison",
          "designation": "Freelance Firmware Developer & Consultant",
          "country": "Canada",
          "tags": ["testimonial", "course testimonial", "course review"]
        },
        {
          "id": 5,
          "testimonial": "Thanks to Israel's course, I discovered my passion for STM32 microcontrollers and have found true love in it. I previously only knew how to design boards with less powerful controllers. Now, I can incorporate STM32 controllers into my custom boards and program them. I am now on the path to becoming a complete embedded software and hardware engineer, thanks to the ongoing courses. I am grateful for the opportunity provided by Israel to enhance my skills and become a better version of myself.",
          "name": "Evans Honu",
          "designation": "Robotics Hardware Design Engineer",
          "country": "Ghana",
          "tags": ["testimonial", "course testimonial", "course review"]
        }
      ]
    },

    {
      "type": "Instructor",
      "instructors": [
        {
          "name": "Israel Gbati and there are other instructors",
          "bio": "Israel Ninsaw Gbati is a distinguished firmware engineer boasting over a decade of hands-on experience in the field. Throughout his career, he has shared his profound knowledge to more than 100,000 professionals, helping to shape the next generation of expets. In addition to his engineering expertise, Israel is an entrepreneur and an award-winning inventor, recognized for his exceptional inventions. He holds a Bachelor's degree in Mechanical Engineering and Automation, complemented by a double Masters degree in Global Innovation Design from Imperial College London and the Royal College of Arts. ",
          "tags": [
            "instructor",
            "teacher",
            "course teacher",
            "course instructor"
          ]
        }
      ]
    },
    {
      "type": "Course",
      "courses": [
        {
          "name": "ARM GNU Assembly Programming From Ground Up™",
          "description": "This is the GNU version of the popular ARM Assembly Programming From Ground Up™ 1 &2 courses. This version of the courses use the platform agnostic GNU syntax supported by the GNU assembler (as). Unlike the ARM Assembly Programming From Ground Up™ 1 &2 courses which use Keil uVision which available on the Windows operating system only, the ARM GNU Assembly Programming From Ground Up™ course teaches you how to write assembly programs for the GNU assembler which is available on Windows, OSX and Linux. Covering ARM Systems Design, Architecture and Practical Assembly Programming, this is the most comprehensive ARM assembly course online. I'll take you step-by-step through engaging and fun video tutorials and teach you everything you need to know to succeed as an ARM embedded developer. By the end of this course you will master the ARM Instruction Set, the Thumb Instruction Set and the Thumb-2 Instruction Set. You will be able to create data structures such as FIFOs in assembly. You will also be able to create Finite State Machines such as the Moore Machine using only assembly code. Furthermore, this course teaches you how to navigate the microcontroller reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely ARM Assembly Language. You will be able to write peripheral drivers in assembly-ADC, UART, SYSTICK, GPIO, GPTM. Specially Designed For People Who Hate Copy/Paste Listen. If you don’t like “Copy/Paste” you’re not alone. I can’t stand it either. I’d literally rather have a piece of code that I wrote from scratch that doesn’t work than someone else’s working code I copied and pasted. And that’s why I’ve spent months designing and recording this course in which I show you how to locate every single register used and the meaning of every hexadecimal value written into the register. By the end of this course... You Will Be Able To : Master the ARM Instruction Set Master the Thumb and Thumb-2 Instruction Sets Write Complex programs in Assembly Language Implement State Machines in Assembly Language Implement Data Structures in Assembly Language Write ADC Drivers in Assembly Language Write UART Drivers in Assembly Language Write GPTM Drivers in Assembly Language Write GPIO Drivers in Assembly Language",
          "course_link": "https://study.embeddedexpert.io/p/arm-gnu-assembly-programming-from-ground-up",
          "category": "Start Here",
          "tags": ["GNU", "Start Here", "courses", "course"],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230131082140-4484ARM%20GNU%20Assembly%20Programming%20From%20Ground%20Up™.webp"
        },
        {
          "name": "STM32 Development Learning Path",
          "description": "1.Mastering STM32CubeMX 5 and CubeIDE\n\nThis course teaches you how build embedded systems firmware and peripheral drivers using the STM32CubeMX 5 framework and the STMCubeIDE development environment. This course has many sections but primarily the course can be divided into three parts.\n\nThe first part deals with peripheral driver development. In this part we master how to use the STM32CubeMX framework to setup the clocks and register parameters of our peripheral drivers and then go on to the CubeIDE development environment to complete the development and testing of peripheral drivers. We shall master different setup configurations of our peripheral drivers in this part. These peripherals include the Universal Serial Bus (USB), the PWM, the SPI, the ADC, UART and the DMA.\n\nThe second part of this master course deals with developing embedded firmware applications using some of the Middleware provided by the STM32CubeMX framework. One of such Middleware we shall master is the FreeRTOS Realtime Kernel. We shall see how to use STM32CubeMX to create tasks and semaphores and other kernel components for realtime firmware development. We shall also see how to develop these kernel components from scratch using our CubeIDE development environment alone.\n\nThe third part of the course deals with working the CubeIDE as a standalone development environment. Over here we shall see how to develop bare-metal embedded-c firmware and drivers without using any libraries. We shall literally download the microcontroller chip's datasheet and develop our firmware and drivers using information from the datasheet only. We shall then go on to use this same datasheet information to develop firmware and peripheral drivers using ARM Assembly Language.\n\n2.Embedded Systems STM32 HAL APIs Driver Development\n\nThe STM32 Low-Layer APIs ( as known as LL) offers a fast light-weight expert-oriented layer which is closer to the hardware than the HAL APIs (Hardware Abstraction Layer). The LL offers low-level APIs at the register level with better optimization. These require deep knowledge of the MCU and peripheral specifications which we shall cover in this course.\n\nWith a programming based approach, this course is designed to give you a solid foundation in firmware and peripheral driver development for the STM32 family of microcontrollers. The goal of this course is to teach you how to navigate the microcontrollers reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware using the STM32 Low-Layer APIs\n\nBy the end of this course you will be able to develop drivers for peripherals like the ADC, UART,PWM, GPIO, TIMER,I2C, SPI, RTC, WWDG, IWDG, RCC, EXTI etc. You will also master the STM32 architecture and how to build professional embedded firmware for STM32 microcontrollers.\n\n3.Embedded Systems STM32 Low-Layer APIs(LL) Driver Development\n\nThe STM32 Low-Layer APIs ( as known as LL) offers a fast light-weight expert-oriented layer which is closer to the hardware than the HAL APIs (Hardware Abstraction Layer). The LL offers low-level APIs at the register level with better optimization. These require deep knowledge of the MCU and peripheral specifications which we shall cover in this course.\n\nWith a programming based approach, this course is designed to give you a solid foundation in firmware and peripheral driver development for the STM32 family of microcontrollers. The goal of this course is to teach you how to navigate the microcontrollers reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware using the STM32 Low-Layer APIs\n\nBy the end of this course you will be able to develop drivers for peripherals like the ADC, UART,PWM, GPIO, TIMER,I2C, SPI, RTC, WWDG, IWDG, RCC, EXTI etc. You will also master the STM32 architecture and how to build professional embedded firmware for STM32 microcontrollers.\n\n4.Embedded Systems Bare-Metal Programming Ground Up (STM32F4)\n\nWith a programming based approach, this course is designed to give you a solid foundation in bare-metal firmware development for ARM-based microcontrollers . The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\n\nStill keeping it simple, this course comes in different ARM Cortex-M development boards so that students can put the techniques to practice using an ARM Cortex-M development board of their choice. This version of the course uses the STMicroelectronics STM32F4-NUCLEO which has an ARM Cortex-M4 microcontoller.\n\nBy the end of this course you will be able configure microcontroller peripherals like ADC, UART,PWM, GPIO, TIMER,I2C, SPI, etc. You will also master the ARM architecture and how to build professional embedded firmware for ARM processors.\n\n5.ARM Cortex-M7 STM32F7 Bare-Metal Programming\n\nWelcome to the ARM Cortex-M7 STM32F7 Bare-Metal Programming course.\n\nWith a programming based approach, this course is designed to give you a solid foundation in bare-metal firmware development for ARM-based microcontrollers . The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\n\nStill keeping it simple, this course comes in different ARM Cortex-M development boards so that students can put the techniques to practice using an ARM Cortex-M development board of their choice. This version of the course uses the STMicroelectronics STM32F7-NUCLEO which has an ARM Cortex-M7 microcontroller.\n\nBy the end of this course you will be able configure microcontroller peripherals like ADC, UART,PWM, GPIO, TIMER,I2C, SPI, etc. You will also master the ARM architecture and how to build professional embedded firmware for ARM processors.\n\n6.STM32L4 Bare-Metal Peripheral Drivers Development\n\nWith a programming based approach, this course is designed to give you a solid foundation in bare-metal firmware development for ARM-based microcontrollers . The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\n\nStill keeping it simple, this course comes in different ARM Cortex-M development boards so that students can put the techniques to practice using an ARM Cortex-M development board of their choice. This version of the course uses the STMicroelectronics STM32L4-NUCLEO which has an ARM Cortex-M4 microcontroller.\n\nBy the end of this course you will be able configure microcontroller peripherals like ADC, UART,PWM, GPIO, TIMER,I2C, SPI, etc. You will also master the ARM architecture and how to build professional embedded firmware for ARM processors.\n\n7.STM32L0 Bare-Metal Peripheral Drivers Development\n\nWith a programming based approach, this course is designed to give you a solid foundation in bare-metal firmware development for ARM-based microcontrollers . The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\n\nStill keeping it simple, this course comes in different ARM Cortex-M development boards so that students can put the techniques to practice using an ARM Cortex-M development board of their choice. This version of the course uses the STMicroelectronics STM32L0-NUCLEO which has an ARM Cortex-M0+ microcontoller.\n\nBy the end of this course you will be able configure microcontroller peripherals like ADC, UART,PWM, GPIO, TIMER,I2C, SPI, etc. You will also master the ARM architecture and how to build professional embedded firmware for ARM processors.\n\n8.STM32F3 Bare-Metal Peripheral Drivers Development\n\nWith a programming based approach, this course is designed to give you a solid foundation in bare-metal firmware development for ARM-based microcontrollers . The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\n\nStill keeping it simple, this course comes in different ARM Cortex-M development boards so that students can put the techniques to practice using an ARM Cortex-M development board of their choice. This version of the course uses the STMicroelectronics STM32F33-NUCLEO which has an ARM Cortex-M4 microcontroller.\n\nBy the end of this course you will be able configure microcontroller peripherals like ADC, UART,PWM, GPIO, TIMER,I2C, SPI, etc. You will also master the ARM architecture and how to build professional embedded firmware for ARM processors.",
          "course_link": "https://study.embeddedexpert.io/p/stm32-development-learning-path",
          "category": "Start Here",
          "tags": ["STM32", "Learning Path", "Start Here", "courses", "course"],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230126091020-5426STM32 Development Learning Path.webp"
        },
        {
          "name": "Mastering STM32CubeMX 5 and CubeIDE - Embedded Systems",
          "description": "Hello Welcome to the Mastering STM32CubeMX 5 and CubeIDE course.\n\nThis course teaches you how to build embedded systems firmware and peripheral drivers using the STM32CubeMX 5 framework and the STMCubeIDE development environment. This course has many sections but primarily the course can be divided into three parts.\n\nThe first part deals with peripheral driver development. In this part, we master how to use the STM32CubeMX framework to set up the clocks and register parameters of our peripheral drivers and then go on to the CubeIDE development environment to complete the development and testing of peripheral drivers. We shall master different setup configurations of our peripheral drivers in this part. These peripherals include the Universal Serial Bus (USB), the PWM, the SPI, the ADC, UART, and the DMA.\n\nThe second part of this master course deals with developing embedded firmware applications using some of the Middleware provided by the STM32CubeMX framework. One such Middleware we shall master is the FreeRTOS Realtime Kernel. We shall see how to use STM32CubeMX to create tasks and semaphores and other kernel components for realtime firmware development. We shall also see how to develop these kernel components from scratch using our CubeIDE development environment alone.\n\nThe third part of the course deals with working the CubeIDE as a standalone development environment. Over here we shall see how to develop bare-metal embedded-c firmware and drivers without using any libraries. We shall literally download the microcontroller chip's datasheet and develop our firmware and drivers using information from the datasheet only. We shall then go on to use this same datasheet information to develop firmware and peripheral drivers using ARM Assembly Language.\n\nPlease take a look at the full course curriculum.\n\nREMEMBER: I have no doubt you will love this course. Also, it comes with a FULL money-back guarantee for 30 days! So put simply, you really have nothing to lose and everything to gain.\n\nSign up and let's start building some drivers.",
          "course_link": "https://study.embeddedexpert.io/p/mastering-stm32cubemx-5-and-cubeide-embedded-systems",
          "category": "Start Here",
          "tags": [
            "STM32CubeMX 5",
            "CubeIDE - Embedded Systems",
            "Start Here",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230126091821-3506Mastering%20STM32CubeMX%205%20and%20CubeIDE%20-%20Embedded%20Systems.webp"
        },
        {
          "name": "Embedded Systems STM32 Low-Layer APIs(LL) Driver Development",
          "description": "Welcome to the Embedded Systems STM32 Low-Layer APIs(LL) Driver Development course.\n\nThe STM32 Low-Layer APIs (as known as LL) offers a fast light-weight expert-oriented layer which is closer to the hardware than the HAL APIs (Hardware Abstraction Layer). The LL offers low-level APIs at the register level with better optimization. These require deep knowledge of the MCU and peripheral specifications which we shall cover in this course.\n\nWith a programming based approach, this course is designed to give you a solid foundation in firmware and peripheral driver development for the STM32 family of microcontrollers. The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware using the STM32 Low-Layer APIs.\n\nBy the end of this course you will be able to develop drivers for peripherals like the ADC, UART, PWM, GPIO, TIMER, I2C, SPI, RTC, WWDG, IWDG, RCC, EXTI etc. You will also master the STM32 architecture and how to build professional embedded firmware for STM32 microcontrollers.\n\nI personally guarantee that by the end of this course you will be able to accomplish the following:\nMaster how to read Datasheets of Microcontrollers\nUnderstand the Cortex-M Architecture\nWrite Analog-to-Digital Converter (ADC) drivers using Low-Level Functions\nWrite PWM drivers using Low-Level Functions\nWrite UART drivers using Low-Level Functions\nWrite TIMER drivers using Low-Level Functions\nWrite Interrupt drivers using Low-Level Functions\nWrite SPI drivers using Low-Level Functions\nWrite I2C drivers using Low-Level Functions\nWrite RTC drivers using Low-Level Functions\nWrite DMA drivers using Low-Level Functions\nWrite RCC drivers using Low-Level Functions\nWrite WWDG drivers using Low-Level Functions\nWrite IWDG drivers using Low-Level Functions",
          "course_link": "https://study.embeddedexpert.io/p/embedded-systems-stm32-low-layer-apis-ll-driver-development",
          "category": "Start Here",
          "tags": [
            "STM32 Low-Layer APIs(LL)",
            "APIs(LL)",
            "Start Here",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230126091904-7643Embedded Systems STM32 Low-Layer APIs(LL) Driver Development.webp"
        },
        {
          "name": "Embedded Systems Bare-Metal Programming Ground Up™ (STM32F4)",
          "description": "The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\n\nBy the end of this course you will be able to configure microcontroller peripherals like ADC, UART, PWM, GPIO, TIMER, I2C, SPI, etc. You will also master the ARM architecture and how to build professional embedded firmware for ARM processors.\n\nI personally guarantee that by the end of this training pack you will be able to accomplish the following:\n\nMaster how to read Datasheets of Microcontrollers\nWrite Universal Asynchronous Receiver-Transmitter (UART) drivers using bare-metal Embedded-C\nWrite Analog-to-Digital Converter (ADC) drivers using bare-metal Embedded-C\nWrite General Purpose Timer (GPTM) drivers using bare-metal Embedded-C\nWrite System Tick (SysTick) Timer drivers using bare-metal Embedded-C\nWrite Pulse Width Modulation (PWM) drivers using bare-metal Embedded-C\nWrite Serial Peripheral Interface (SPI) drivers using bare-metal Embedded-C\nWrite Inter-Integrated Circuit (I2C) drivers using bare-metal Embedded-C\nWrite Interrupt drivers using bare-metal Embedded-C\nWrite General Purpose Input/Output (GPIO) drivers using bare-metal Embedded-C\nMaster the ARM-Cortex CMSIS standard\n\nWrite firmware by applying Object-Oriented principles like Polymorphism, Inheritance and Encapsulation in C and C++",
          "course_link": "https://study.embeddedexpert.io/p/modern-bare-metal-embedded-c-programming-from-ground-up111",
          "category": "Start Here",
          "tags": [
            "STM32F4",
            "Bare-Metal Programming",
            "Start Here",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230126092158-5786Embedded Systems Bare-Metal Programming Ground Up™ (STM32F4).webp"
        },
        {
          "name": "Embedded Ethernet Essential Training with CubeMX",
          "description": "Embedded Ethernet Essential Training with CubeMX is a comprehensive course designed to help you master the art of building embedded Ethernet applications using the STM32CubeMX framework. This beginner-friendly course will teach you how to configure Ethernet modules, develop applications for hosting web pages, control hardware remotely, and display real-time data on web pages. With a strong emphasis on practical, real-world applications, this course will equip you with the skills and knowledge required to excel in the field of embedded systems and IoT development. By the end of this course, You Will Be Able To: Understand the Fundamentals of Networking. Understand the fundamentals of the Light Weight IP (LwIP) stack. Configure STM32F7 ethernet modules using CubeMX. Write Embedded Ethernet Applications for Hosting Web pages. Write Embedded Ethernet Applications for Controlling Hardware through Web pages. Write Embedded Ethernet Applications for Sending Sensor Data to Web pages.",
          "course_link": "https://study.embeddedexpert.io/p/ethe_cubemx",
          "category": "Start Here",
          "tags": [
            "CubeMX",
            "STM32CubeMX framework",
            "STM32F7",
            "Start Here",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230126092108-1635Embedded Ethernet Essential Training with CubeMX.webp"
        },
        {
          "name": "Embedded Systems STM32 HAL APIs Driver Development",
          "description": "Welcome to the Embedded Systems STM32 Hardware Abstraction Layer (HAL) Driver Development course.\n\nThe STM32 Hardware Abstraction Layer (HAL) provides a simple, generic multi-instance set of APIs (application programming interfaces) to interact with the upper layers like the user application, libraries and stacks.\n\nThe HAL driver APIs are split into two categories: generic APIs, which provide common and generic functions for all the STM32 series and extension APIs, which include specific and customized functions for a given line or part number. The HAL drivers include a complete set of ready-to-use APIs that simplify the user application implementation. For example, the communication peripherals contain APIs to initialize and configure the peripheral, manage data transfers in polling mode, handle interrupts or DMA, and manage communication errors.\n\nIn summary, the HAL offers high-level and feature-oriented APIs with a high-portability level. These hide the MCU and peripheral complexity from the end-user.\n\nWith a programming based approach, this course is designed to give you a solid foundation in firmware and peripheral driver development for the STM32 family of microcontrollers. The goal of this course is to teach you how to navigate the microntroller reference manual and datasheet to extract the right information to professionally build peripheral drivers and firmware using the STM32 HAL APIs.\n\nBy the end of this course you will be able to develop drivers for peripherals like the ADC, UART, PWM, GPIO, TIMER, I2C, SPI, RTC, RCC, EXTI etc. You will also master the STM32 architecture and how to build professional embedded firmware for STM32 microcontrollers.\n\nI personally guarantee that by the end of this course you will be able to accomplish the following:\nWrite firmware using only HAL functions\nUnderstand the Cortex-M Architecture\nWrite Analog-to-Digital Converter (ADC) drivers using HAL functions\nWrite PWM drivers using HAL functions\nWrite UART drivers using HAL functions\nWrite TIMER drivers using HAL functions\nWrite Interrupt drivers using HAL functions\nWrite SPI drivers using HAL functions\nWrite I2C drivers using HAL functions\nWrite RTC drivers using HAL functions\nWrite DMA drivers using HAL functions\nWrite RCC drivers using HAL functions\n\nPlease take a look at the full course curriculum.\n\nREMEMBER: I have no doubt you will love this course. Also, it comes with a FULL money-back guarantee for 30 days! So put simply, you really have nothing to lose and everything to gain.",
          "course_link": "https://study.embeddedexpert.io/p/embedded-systems-stm32-hal-apis-driver-development",
          "category": "Start Here",
          "tags": [
            "STM32 HAL APIs",
            "STM32CubeMX framework",
            "STM32F7",
            "LwIP",
            "Start Here",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230126092252-3202Embedded Systems STM32 HAL APIs Driver Development.webp"
        },
        {
          "name": "Bluetooth Low Energy (BLE) From Ground Up™",
          "description": "Welcome to the Bluetooth Low Energy (BLE) From Ground Up™ course.\n\nThis practical Bluetooth Low Energy (BLE) course will provide you with a solid in-depth training to be able to build BLE embedded devices and use them to communicate with other smart devices and mobile phone app. This course aims to provide a solid practical understanding of Bluetooth Low Energy: the protocol, how data is organized, and the key design trade-offs that were made in the creation of the protocol.\n\nBy the end of this course you should be able to build your own BLE enabled embedded devices and give a lecture on the BLE protocol.\n\nI personally guarantee that by the end of this course you will be able to accomplish the following:\nBuild Bluetooth Low Energy (BLE) firmware for different use cases\nUnderstand the Bluetooth Low Energy (BLE) Stack\nCreate your own Services and Characteristics\nBuild Bluetooth Low Energy Embedded Devices\nGive a lecture on the Bluetooth Low Energy (BLE) Architecture\n- If you are thinking about developing a product that incorporates Bluetooth Low Energy then take this course.\n- If you are an embedded engineer who wants to create Bluetooth Low Energy (BLE) firmware then take this course.\n- If you just want to learn how to code and build BLE devices then take this course.",
          "course_link": "https://study.embeddedexpert.io/p/bluetooth-low-energy-ble-from-ground-up_new",
          "category": "Intermediate",
          "tags": [
            "BLE",
            "(BLE) From Ground Up™",
            "Intermediate",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230126094526-7135Bluetooth Low Energy (BLE) From Ground Up™.webp"
        },
        {
          "name": "Build Your Own RealTime OS (RTOS 2) From Ground Up™ on ARM 2",
          "description": "Welcome to the Build Your Own RealTime OS (RTOS) From Ground Up™ on ARM 2 course.\n\nThis course teaches you how to build Real-Time Operating Systems through intensive practice and theory. It starts by getting you excited through an introduction to the internals of a Real-Time Kernel on ARM Processors, which you shall implement yourself in code. Then we move on to learn all there is about Real-Time Operating Systems, their various parts, how they work and then we finally build our own Real-Time Operating System exploring different scheduling algorithms and Inter-Thread communication tools.\n\nThis course is a two part series. This is the second part of the series.\n\nAt the end of this course you should be able to build your own Real-Time Operating System from scratch, give your own lecture on Real-Time Operating Systems, be able to build a Round-Robin Scheduler, Priority Scheduler, Sporadic Scheduler, Periodic Scheduler, be able to calculate the CPU utilization of your RTOS, be able to build an OS Kernel etc. Please see the course curriculum section to find out all the amazing content awaiting you.\n\nWho is this training pack for?\n\nAnyone seeking to improve their embedded firmware development skills\nAnyone seeking to build their own Realtime Operating System (RTOS).\n\nI personally guarantee that by the end of this training pack you will be able to accomplish the following:\nBuild a Real-Time Operating System from Scratch\nBuild Round-Robin Schedulers\nBuild Cooperative Schedulers\nBuild Periodic Schedulers\nBuild First Come First Served Scheduler\nBuild Rate Monotonic Schedulers\nBuild a board support package from scratch\nCalculate the CPU Utilization of an RTOS\nUnderstand the OS Support Features of the Cortex-M Architecture\nUnderstand the Internals of an RTOS Kernel\nBe able to implement and explain popular scheduling algorithms\nBe able to give a lecture on Real-Time Operating Systems\nBe able to build Priority Schedulers\nBe able to build Sporadic Schedulers\nBe able to build Fixed Schedulers\nBe able to build Periodic Schedulers using 4 different algorithms",
          "course_link": "https://study.embeddedexpert.io/p/rtos2",
          "category": "Intermediate",
          "tags": ["RTOS 2", "ARM 2", "Intermediate", "courses", "course"],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230131074903-9408Build Your Own RealTime OS (RTOS 2) From Ground Up™ on ARM 200.webp"
        },
        {
          "name": "Deep Learning on ARM Processors - From Ground Up™",
          "description": "We are going to embark on a very exciting journey together. We are going to learn how to build deep neural networks from scratch on our microcontrollers. We shall begin by learning the basics of deep learning with practical code showing each of the basic building blocks that end up making a giant deep neural network. All of this on our microcontroller, both training and inference. As we begin to deal with large datasets we shall start training our neural networks on our computers and then deploying the trained models on our microcontrollers. Due to the limited memory and processing power of microcontrollers we shall learn methods for quantizing our models before deploying them on our resource constrained microcontrollers without compromising the accuracy of our models. By the end of this course you will be able to build neural networks from scratch without libraries, be able to master quantization methods for deploying neural networks on microcontrollers, be able to build deep learning firmware for Handwriting Recognition, be able to use Keras, CubeMX.AI and so much more. If you are new to machine learning and deep learning, this course is for you. The course starts from the very basic building block of neural networks and teaches you how to build your own neural network using pure c code before we move on to see how to use readily available libraries. Course Content I personally guarantee that by the end of this course you will be able to accomplish the following Build Neural Networks from scratch without libraries Master quantization methods for deploying Neural Networks on microcontrollers Build a Deep Learning Firmware for Handwriting Recognition Be able to give a Lecture on Deep Learning",
          "course_link": "https://study.embeddedexpert.io/p/deep-learning-on-arm-processors-from-ground-up",
          "category": "Intermediate",
          "tags": [
            "Deep Learning",
            "ARM Processors",
            "Keras CubeMX.AI",
            "Intermediate",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230126092925-3689Deep Learning on ARM Processors - From Ground Up™.webp"
        },
        {
          "name": "Embedded Ethernet Programming with HAL",
          "description": "This course is the intermediate level course of a learning path teaching you how to write/configure drivers for the Ethernet peripheral as well as write embedded Ethernet firmware for different networking protocols such as http, dhcp etc.\n\nSo with that understood, let me tell you…:\nWhat make this course different from the beginner course ?\n\nIn this course we write all the Ethernet drivers ourselves using the the STM32 HAL APIs. Unlike the beginner course, in this course we also implement the Ethernet interface files linking our Ethernet module to the LwIP library ourselves.\nThe STM32 Hardware Abstraction Layer (HAL) provides a simple, generic multi-instance set of APIs (application programming interfaces) to interact with the upper layers like the user application, libraries and stacks.\n\nIn this intermediate course we also implement more examples of embedded Ethernet applications.\n\nThis intermediate course can be divided into 4 major sections\n\nFirst Section\nIn the first section we give a short introduction to networking and then explore the ethernet capabilities of the STM32F7 microcontroller.\nSecond Section\nIn this section we write drivers for all the peripherals we will be using in the course. We write drivers for the ADC, UART, RCC and GPIO.\nThird Section\nIn the third section we write all the drivers required to fully configure the Ethernet module. We will implement a driver for configuring the Ethernet gpio pins to operate in RMII mode, we will implement a driver for transmitting packets, another one for receiving packets etc.\n\nIt is in this section that we decide on the Ethernet parameters such the speed, the duplex, whether to use auto-negotiation or not etc. After configuring the Ethernet module we conclude this section by implementing a function that interfaces our Ethernet module to the Light Weight IP (LwIP) library. LwIP is a small independent open-source implementation of the TCP/IP protocol stack designed for embedded systems.\n\nLast Section\nThe final section begins by giving an introduction to Light Weight IP (LwIP) and then goes on to build embedded Ethernet applications. Here are some the applications we shall build:\nChecking if the cable is connected\nGetting an IP address from DHCP\nHosting Webpages with httpd\nDisplaying Realtime Data on Webpages with SSI\nWorking with Multiple SSI Tags\nControlling Hardware from WebServers using CGI\nInjecting HTML code into a Webpage using SSI and CGI\nBy the end of this course...\nYou Will Be Able To :\nUnderstand the Fundamentals of Networking.\nUnderstand the fundamentals of the Light Weight IP (LwIP) stack.\nWrite Drivers for the STM32F7 Ethernet Peripheral using HAL APIs.\nWrite Embedded Ethernet Applications for Hosting Web pages.\nWrite Embedded Ethernet Applications for Controlling Hardware through Web pages.\nWrite Embedded Ethernet Applications for Sending Sensor Data to Web pages.",
          "course_link": "https://study.embeddedexpert.io/p/eth_hal",
          "category": "Intermediate",
          "tags": [
            "Embedded Ethernet",
            "HAL",
            "Intermediate",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230126092958-9804Embedded Ethernet Programming with HAL.webp"
        },
        {
          "name": "Build Your Own RealTime OS (RTOS 1) From Ground Up™ on ARM 1",
          "description": "This course teaches you how to build a Real-Time Operating Systems through intensive practice and theory. It starts by getting you excited through an introduction to the internals of a Real-Time Kernel on ARM Processors, which you shall implement yourself in code. Then we move on to learn all there is about Real-Time Operating Systems, their various parts, how they work and then we finally build our own Real-Time Operating System exploring different scheduling algorithms and Inter-Thread communication tools.\n\nAt the end of this course you should be able to build your own Real-Time Operating System from scratch, give your own lecture on Real-Time Operating Systems, be able to build a Round-Robin Scheduler, be able to build a Periodic Scheduler, be able to calculate the CPU utilization of your RTOS, be able to build an OS Kernel etc. Please see the course curriculum section to find out all the amazing content awaiting you.\n\nWho is this course for?\n\nThis course is for anyone seeking to improve their embedded firmware development skills. This course focuses on how to apply object-oriented principles to embedded firmware development.\n\nCourse Content\n\nI personally guarantee that by the end of this course you will be able to accomplish the following:\nBuild a Real-Time Operating System from Scratch\nBuild Round-Robin Schedulers\nBuild Cooperative Schedulers\nBuild Periodic Schedulers\nBuild First Come First Served Scheduler\nBuild Rate Monotonic Schedulers\nBuild a board support package from scratch\nCalculate the CPU Utilization of an RTOS\nUnderstand the OS Support Features of the Cortex-M Architecture\nUnderstand the Internals of an RTOS Kernel\nBe able to implement and explain popular scheduling algorithms",
          "course_link": "https://study.embeddedexpert.io/p/rtos1",
          "category": "Intermediate",
          "tags": [
            "RTOS 1",
            "ARM 1",
            "RealTime OS",
            "Intermediate",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230131075127-1456Build Your Own RealTime OS (RTOS 1) From Ground Up™ on ARM 100.webp"
        },
        {
          "name": "FreeRTOS From Ground Up™ on ARM Processors",
          "description": "This course teaches you the foundations of real-time systems and how to build real-time applications using FreeRTOS, one of the most popular real-time operating systems for embedded systems. The course gives a detailed overview of the characteristics of the FreeRTOS real-time kernel, provides a detailed tutorial on the APIs to implement the various features of FreeRTOS and then goes on to build about 50 real-time projects. This course does not assume prior knowledge of real-time systems and application programming. By the end of this course you should be able to build your own multitask FreeRTOS real-time applications which use all the features of a modern real-time application (such as semaphores, mutexes, event flags, hooks, queues, mailboxes etc.) and test their performance. You should also be able to: Calculate the CPU Utilization of an RTOS, Understand Rate Monotonic Schedulers, port FreeRTOS to any ARM processor, Understand Round-Robin Schedulers, Understand Weighted-Round-Robin Schedulers, Understand First Come First Served Schedulers, Understand the Internals of an RTOS kernel, Implement and explain popular scheduling algorithms and so much more. Please take a look at the full course curriculum. Who is this course for? This course is for anyone seeking to improve their embedded firmware development skills. This course focuses on mastering the FreeRTOS realtime operating system.",
          "course_link": "https://study.embeddedexpert.io/p/freertos-from-ground-up-on-arm-processors_new",
          "category": "Intermediate",
          "tags": [
            "FreeRTOS",
            "ARM Processors",
            "RealTime OS",
            "Intermediate",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230131074211-4870FreeRTOS From Ground Up™ on ARM Processors.webp"
        },
        {
          "name": "Practical Low Cost Bare-Metal Bluetooth Development",
          "description": "Hello, welcome to the “Practical Low Cost Bare-Metal Bluetooth Development” course. As the name implies this course teaches you how to develop bare-metal drivers and libraries for the popular low-cost Bluetooth chips currently on the market. In this course we cover chips across all Bluetooth protocols: Bluetooth Classic, Bluetooth 4.0 (BLE), Bluetooth 5.0(BLE). The primary objective of this course is to give you the skillset to professionally develop bare-metal Bluetooth enabled firmware. This is an important course in our embedded wireless development series. In this course we shall develop bare-metal drivers and libraries for the following low-cost Bluetooth chips: HC-06: Bluetooth Classic, HC-05: Bluetooth Classic, JDY-08: Bluetooth Low Energy (BLE) 4.0, HM-10: Bluetooth Low Energy (BLE) 4.0, HM-19: Bluetooth Low Energy (BLE) 5.0. So with that understood, let me tell you… Exactly What You’re Getting This course can be divided into 4 major sections. First Section: The first section is theoretical. In this section we shall learn about the Bluetooth protocol, its history, and the key differences amongst the various protocols. We shall also compare our selected Bluetooth chips across different parameters so that you will know the right chip to use for a particular use case. Second Section: In the second section we shall develop bare-metal drivers for interfacing the Bluetooth chip to our STM32 microcontroller. We shall navigate the microcontroller’s reference manual and datasheet to extract the right information to build these drivers. Third Section: After developing our drivers for interfacing the Bluetooth chip to our STM32 microcontroller, we shall go ahead and develop efficient data structures for managing communication between the Bluetooth chip and our microcontroller. Last Section: In the last section, we shall combine the drivers and data structures developed in the previous sections to develop a library for each of our Bluetooth chips. We shall then go on to use the library to develop Bluetooth enabled firmware applications such as: Sending data over Bluetooth from an STM32 slave device to a mobile phone master device, Sending data over Bluetooth from an STM32 master device, Receiving data over Bluetooth from an STM32 slave device, Receiving data over Bluetooth from an STM32 master device, Communicating wirelessly between two STM32 microcontrollers using Bluetooth classic, Communicating wirelessly between two STM32 microcontrollers using Bluetooth Low Energy (BLE), Controlling hardware modules by Bluetooth, Sending sensor data periodically over Bluetooth with a Realtime Clock (RTC), Sending sensor data over Bluetooth with RTC triggered alarm. As always, no copy/paste. We write each line code from scratch.",
          "course_link": "https://study.embeddedexpert.io/p/generic-bluetooth",
          "category": "Intermediate",
          "tags": [
            "Bluetooth Development",
            "Practical Low Cost",
            "BLE",
            "Intermediate",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230203080304-3498Practical Low Cost Bare Metal Bluetooth Development.jpg"
        },
        {
          "name": "Embedded IR Remote Control with NEC Protocol",
          "description": "Hello, Welcome to the Embedded IR Remote Control with NEC Protocol course. This course teaches you how to develop bare-metal drivers and libraries to enable you to control your embedded device using IR remote controls. Essentially, you should be able to control your embedded device using any remote control you have lying around at home. If this is a skill you want to add to your embedded skillset, then take a look at our Embedded IR Remote Control with NEC Protocol course. So with that understood, let me tell you… Exactly What You’re Getting This course can be divided into 4 major sections. First Section: The first section is theoretical. In this section we learn about IR remote control modulation and encoding theory, and also the structure and features of the NEC protocol. Over here we shall deal with topics such as Amplitude Shift Keying (ASK) modulation vs Frequency Shift Keying Modulation (FSK), Pulse Position Encoding, Pulse Width Encoding, Pulse Distancing Encoding, Frame Format of the NEC protocol. Second Section: In the second section we shall develop all the drivers to help us debug and implement some real-world applications once we have developed all modules of the system. Over here we shall develop: A Timebase to help us generate precise delays, An ADC driver to help us sample sensor data when a particular key is pressed on the IR Remote control, A UART driver to help us to print out debug information, A GPIO driver to turn on the light when a particular key is pressed on the IR Remote control. Third Section: In the third section we shall develop the drivers and library required for interfacing the IR receiver to our microcontroller and decoding the received pulses. Over here we shall develop: An external interrupt driver for detecting edge changes from our IR receiver pin, A timer driver for measuring pulse length, And then we shall develop the library for fully decoding the pulses received by the IR receiver. Last Section: Once all the system drivers and library are fully developed, we then develop some real-world applications. We shall develop firmware application for turning on the light based on the key pressed on the remote control, We shall develop firmware application for sampling and displaying sensor data based on the key pressed, We shall develop firmware application for displaying the time based on the key pressed, We shall develop firmware application for displaying the key pressed on any remote control we have at home, the reason this will work is because most remote controls are based on the NEC protocol.",
          "course_link": "https://study.embeddedexpert.io/p/embedded-ir",
          "category": "Intermediate",
          "tags": [
            "IR Remote Control",
            "NEC Protocol",
            "Intermediate",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230201034604-1723Embedded IR Remote Control with NEC Protocol.jpg"
        },
        {
          "name": "Embedded Systems Cellular Firmware Development(GSM)",
          "description": "Communicate with your embedded devices using cellular technology: Phone Call, SMS, M2M etc. This course teaches you how to develop drivers and libraries for adding cellular functionality to your embedded device. This course uses the STM32 microcontroller and the A6 GSM/GPRS chip. The A6 is a low-cost quad band GSM/GPRS chip equipped with 850/900/1800/1900MHz worldwide communication band. If you do not understand what a band means, do not worry, by the end of this course you will understand this and much more. The drivers developed in this course will work on almost all cellular chips out there, this is because most of them use the UART for communication.",
          "course_link": "https://study.embeddedexpert.io/p/embedded-systems-cellular-firmware-development-gsm",
          "category": "Intermediate",
          "tags": [
            "Cellular Firmware",
            "GSM",
            "Intermediate",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230201034926-2385Embedded Systems Cellular Firmware Development(GSM)5.webp"
        },
        {
          "name": "Embedded Display Drivers Development: A Bare-Metal Approach",
          "description": "Unlock the full potential of your embedded systems with our comprehensive Embedded Systems Display Drivers course. Learn essential concepts and techniques for developing display drivers for various applications, from simple 7/8 segment displays to advanced OLEDs and TFTs. Our expert instructor will guide you through key technologies and programming techniques using STM32 microcontrollers. Study at your own pace with our flexible online format and gain hands-on experience with real-world examples and exercises. Enroll now and take advantage of our 30-day money-back guarantee.",
          "course_link": "https://study.embeddedexpert.io/p/display-drivers",
          "category": "Intermediate",
          "tags": [
            "Display Drivers",
            "Bare-Metal Approach",
            "Intermediate",
            "courses",
            "course"
          ],
          "image": "https://be.embeddedexpert.io/public/storage/upload/books/230201035117-9241Embedded Display Drivers Development A Bare-Metal Approach.jpg"
        }
      ]
    }
  ]
}
